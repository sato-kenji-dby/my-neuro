
《MCP服务器功能扩展指南》（小白版）

Q:什么是MCP？
A:MCP 是claude的那个公司开源的一种协议标准，可以连接AI与外部数据源和工具。提供了连接标准化方式。
因为以前想要让LLM使用工具，每一家都有各自的工具格式，大家都各井水不犯河水。你一种格式我一种格式。写了一个工具，可能qwen的可以用。
glm的就不能用了。还得重新给glm写一个属于它的工具格式代码。所以mcp可以理解为统一了各家外部工具和数据的一种标准。只要是支持mcp的LLM模型，就能使用mcp编写的工具及数据等。

Q:什么是MCP服务器模块？
A:MCP服务器模块是一个JavaScript文件，它让你可以给支持mcp的LLM模型，例如claude、chatgpt、deepseek（或其他AI助手）添加使用工具的能力。
简单来说：通过添加新模块，你可以让AI做更多事情，比如查询天气、联网搜索、控制电脑等。

Q:添加新模块能做什么？
A:每个模块都给AI添加一个或多个"工具"。每个工具让AI能执行一个特定功能。例如：

1查询日期时间
2搜索网页信息
3控制智能家居设备
4爬虫数据
5翻译文本
6使用APP
7发送邮件/短信
8操作数据库
...几乎支持任何你能用代码实现的功能！

Q:为什么要添加新模块？
A:个性化功能：添加你特别需要的功能
自动化任务：让AI帮你完成重复性工作
连接外部服务：让AI能访问其他网站和服务
增强AI能力：让LLM做能做更多以前做不到的事

Q:如何添加新模块？
A:创建一个新的JavaScript文件（例如：yourToolServer.js）
编写代码实现你想要的功能
放到当前的目录下，重启服务器

服务器会自动发现并加载你的新功能，然后AI就可以使用它了！
示例：
想让AI查询城市空气质量？
创建一个airQualityServer.js文件：
javascript// 定义工具
const AIR_TOOL = {
    name: "check_air_quality",
    description: "查询指定城市的空气质量指数",
    parameters: {
        type: "object",
        properties: {
            city: {
                type: "string",
                description: "城市名称（英文）"
            }
        },
        required: ["city"]
    }
};

// 执行工具的函数
async function getAirQuality(parameters) {
    const city = parameters.city;
    // 这里写代码查询空气质量API
    // ...

    // 返回结果
    return `${city}的空气质量：良好，AQI: 42`;
}

// 导出必要函数
module.exports = {
    getToolDefinitions: () => [AIR_TOOL],
    executeFunction: async (name, parameters) => {
        if (name !== "check_air_quality") {
            throw new Error(`不支持此功能: ${name}`);
        }
        return await getAirQuality(parameters);
    }
};

Q:不会编程怎么办？
A:如果你不懂编程，可以：

1:把这个文章全文复制发给Claude或其他AI，说出你的需求，让AI来帮你写模块代码
2找懂编程的朋友帮忙
3给魔方打钱，让它来给你写一个

我个人比较推荐3


小贴士：

每个模块尽量专注于一个功能领域
模块名称最好能描述其功能（如weatherServer.js）
添加新模块后，可以访问http://localhost:3000/health查看是否加载成功，或者和AI对话测试看看AI是否能成功执行你给他定制的功能。



具体格式示范：
创建新JS文件：比如 yourToolServer.js
基本格式：

javascript// 定义工具
const YOUR_TOOL = {
    name: "your_tool_name", 
    description: "简单描述",
    parameters: {
        type: "object",
        properties: {
            param1: {
                type: "string",
                description: "参数1说明"
            }
        },
        required: ["param1"] 
    }
};

// 执行工具的函数
async function doYourThing(parameters) {
    // 你的代码逻辑
    return "返回结果";
}

// 必须导出这两个函数
module.exports = {
    // 返回工具定义
    getToolDefinitions: () => [YOUR_TOOL],
    
    // 执行工具
    executeFunction: async (name, parameters) => {
        if (name !== "your_tool_name") {
            throw new Error(`不支持: ${name}`);
        }
        return await doYourThing(parameters);
    }
};


